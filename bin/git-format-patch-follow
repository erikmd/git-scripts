#!/usr/bin/env bash
set -euo pipefail
# Copyright (c) 2017-2018  Erik Martin-Dorel
#
# Licensed under the MIT license <https://opensource.org/licenses/MIT>
#
ts="Time-stamp: <2018-01-01 23:51:44 emartin>"; ts=${ts#Time-stamp: }

function die_hard() {
    echo -e "$@" >&2
    exit 1
}

function usage() {
    cat >&2 <<EOF
git-format-patch-follow $ts

Facility to export the Git history of given files, including renames.

Usage:
  git format-patch-follow [<options>...] [--follow] [--] [<paths>...]

Example:
  git format-patch-follow --stdout --root --follow -- file1... > patch

Summary:
  This command accepts the very same arguments as 'git format-patch',
  as well as the '--follow' option.

  If this option '--follow' is passed to 'git format-patch-follow', all
  subsequent arguments that are not options themselves are considered
  as relative file names to be pre-processed by 'git log --follow' to
  retrieve the absolute paths of these files, including renames, which
  are then processed by vanilla 'git format-patch'.

Credits:
  git-format-patch-follow was written by Erik Martin-Dorel and it is
  distributed under the MIT license <//opensource.org/licenses/MIT>.
EOF
}

function is_among() {
    local arg="$1"
    shift
    local elt
    for elt; do
        if [ "$arg" = "$elt" ]; then
            return 0
        fi
    done
    return 1
}

function is_special_flag_wait_arg() {
    local flag="$1"
    # Extracted from
    # - https://github.com/git/git/blob/master/Documentation/git-format-patch.txt
    # - https://github.com/git/git/blob/master/Documentation/diff-options.txt
    local specials=('-o' '-v' '--add-header' '--anchored' '--base' '--cc' '--diff-algorithm' '--diff-filter' '--dst-prefix' '--from' '--inter-hunk-context' '--in-reply-to' '--line-prefix' '--output-directory' '--reroll-count' '--signature' '--signature-file' '--src-prefix' '--start-number' '--subject-prefix' '--suffix' '--to' '--unified' '--word-diff-regex' '--ws-error-highlight')
    if is_among "$flag" "${specials[@]}"; then
        return 0
    else
        return 1
    fi
}

function main() {
    if [[ $# = 0 ]]; then
        usage
        exit 0
    fi
    local args=()
    local paths=()
    local end_flags='false'
    local follow='false'
    while [[ $# -gt 0 ]]; do
        case "$1" in
            "--")
                if [[ ${end_flags} == 'true' ]]; then
                    paths+=("$1")
                else
                    end_flags='true'
                fi
                shift
                ;;
            -*) # Better than -?|--*)
                # Because some short flags can have their arg concatenated
                if [[ ${end_flags} == 'true' ]]; then
                    paths+=("$1")
                    shift
                elif [[ "$1" == '--help' ]]; then
                    usage
                    exit 0
                elif [[ "$1" == '--follow' ]]; then
                    follow='true'
                    shift
                elif is_special_flag_wait_arg "$1"; then
                    if [[ $# -lt 2 ]]; then
                        die_hard "Error: '$1' expects one argument."
                    else
                        args+=("$1" "$2")
                        shift 2
                    fi
                else
                    args+=("$1")
                    shift
                fi
                ;;
            *)
                if [[ $follow == 'true' ]]; then
                    paths+=("$1")
                else
                    args+=("$1")
                fi
                shift
                ;;
        esac
    done
    # ${paths[@]} are the files to follow
    # ${args[@]} are all args but '--', '--follow' and subsequent args
    local path
    local file
    local files=()
    while read -r -d $'\0' file; do
        files+=("$file")
    done < <(for path in "${paths[@]}"; do \
                 git log -z --name-only --format="format:" --follow "$path"; \
             done | tr -s '\0' | sort -u -z)
    # ${files[@]} is the list of files to consider in the history export
    # files are relative to the root dir. of the repo, so we need to cd:
    cd "$(git rev-parse --show-toplevel)"
    git format-patch "${args[@]}" -- "${files[@]}"
}

main "$@"
