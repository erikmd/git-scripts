#!/usr/bin/env bash
# Copyright (c) 2017 Erik Martin-Dorel
ts="Time-stamp: <2017-10-07 19:34:45 emartin>"; ts=${ts#Time-stamp: }
set -euo pipefail

function die_hard() {
    echo -e "$@" >&2
    exit 1
}

function usage() {
    cat >&2 <<EOF
git-format-patch-follow $ts

Facility to export the Git history of a given file, including renames.

Usage:
$ git format-patch-follow <options> --follow <filename>

Example:
$ git format-patch-follow --stdout --root --follow last.bash > last.diff
EOF
}

function main() {
    local arg
    local follow=''
    local skip=''
    local args=()
    if [[ $# = 0 ]]; then
        usage
        exit 0
    fi
    for arg; do
        case "$arg" in
            "--")
                die_hard "Error: '-- [filenames]' arguments are not allowed."
                ;;
            "--follow")
                if [[ $# -lt 2 ]]; then
                    die_hard "Error: '--follow' expects one argument."
                else
                    follow="$2"
                    skip='true'
                    shift 2
                fi
                ;;
            "--help")
                usage
                exit 0
                ;;
            *)
                if [[ $skip = 'true' ]]; then
                    skip=''
                else
                    args[${#args[@]}]="$arg"
                    shift
                fi
                ;;
        esac
    done
    if [[ -z "$follow" ]]; then
        die_hard "Error: option '--follow <filename>' required."
    fi
    # $follow is the single file to follow
    # ${args[@]} is the rest of arguments
    local file
    local files=()
    while read -r -d $'\0' file; do
        files[${#files[@]}]="$file"
    done < <(git log -z --name-only --format="format:" --follow "$follow" | tr -s '\0' | sort -u -z)
    # ${files[@]} is the list of files related (w.r.t. renaming) to $follow
    git format-patch "${args[@]}" -- "${files[@]}"
}

main "$@"
